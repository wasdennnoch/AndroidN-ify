import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

ext.buildName = System.getenv("BUILD_TAG") ?: "0.3.0"
ext.buildTime = buildTime()
ext.gitCommit = System.getenv("GIT_COMMIT") ?: "dev"
ext.gitInfo = getGitInfo()

ext.officialBuild = System.getenv("WDN_PC") ?: "false"
ext.automatedBuild = System.getenv("AUTOMATED_BUILD") ?: "false"
ext.enableUpdater = System.getenv("ENABLE_UPDATER") ?: "false"
ext.updaterUrl = System.getenv("UPDATER_URL") ?: "null"
ext.buildNumber = System.getenv("BUILD_NUMBER") ?: "0"
ext.useSigningConfig = false

ext.supportLibraryVersion = "24.2.0";

def keyPropPath = System.getenv("KEY_PROP_PATH") ?: "../../../"
def propFile = project.file(keyPropPath + "key.properties")
if (propFile.exists()) {
    ext.useSigningConfig = true
}

android {
    signingConfigs {
        main
    }
    compileSdkVersion 25
    buildToolsVersion '25.0.2'
    defaultConfig {
        applicationId "tk.wasdennnoch.androidn_ify"
        minSdkVersion 21
        //noinspection OldTargetApi
        targetSdkVersion 23
        versionCode 6
        versionName "$buildName"

        buildConfigField 'String', 'BUILD_TIME', "\"$buildTime\""
        buildConfigField 'String', 'GIT_COMMIT', "\"$gitCommit\""
        buildConfigField 'String', 'GIT_INFO', "\"$gitInfo\""

        buildConfigField 'boolean', 'OFFICIAL_BUILD', "$officialBuild"
        buildConfigField 'boolean', 'AUTOMATED_BUILD', "$automatedBuild"
        buildConfigField 'boolean', 'ENABLE_UPDATER', "$enableUpdater"
        buildConfigField 'String', 'UPDATER_URL', "\"$updaterUrl\""
        buildConfigField 'int', 'BUILD_NUMBER', "$buildNumber"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (useSigningConfig) {
                signingConfig signingConfigs.main
            }
        }
        debug {
            versionNameSuffix = "-debug"
            if (useSigningConfig) {
                signingConfig signingConfigs.main
            }
        }
    }
    lintOptions {
        abortOnError false
    }
    useLibrary 'org.apache.http.legacy'
}

if (propFile.exists()) {
    def props = new Properties()
    props.load(new FileInputStream(propFile))
    android.signingConfigs.main.storeFile project.file(keyPropPath + props.keyStore)
    android.signingConfigs.main.storePassword props.keyStorePassword
    android.signingConfigs.main.keyAlias props.keyAlias
    android.signingConfigs.main.keyPassword props.keyPassword
}

def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

def getGitInfo() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'remote', 'show', 'origin'
            standardOutput = stdout
        }
        exec {
            commandLine 'git', 'log', '-n', '1'
            standardOutput = stdout
        }
        return stdout.toString().replace("\n", "\\n | ").replace("\"", "\\\"")
    } catch (Throwable ignore) {
        return "failed"
    }
}

dependencies {
    provided 'de.robv.android.xposed:api:81'
    provided 'de.robv.android.xposed:api:81:sources'
    provided files('libs-provide/android_hidden_api_23.jar')
    compile "com.android.support:support-v13:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
    compile "com.android.support:palette-v7:$supportLibraryVersion"
    compile "com.android.support:design:$supportLibraryVersion"
    compile 'com.crossbowffs.remotepreferences:remotepreferences:0.4'
}
